((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\d((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\d)\.){3}(\d((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\d))|(([0-9A-Fa-f]{1,4}:){0,5}:((\d((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\d)\.){3}(\d((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\d))|(::([0-9A-Fa-f]{1,4}:){0,5}((\d((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\d)\.){3}(\d((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\d))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))
((?:[0-9A-Fa-f]{1,4}:){6}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|::(?:[0-9A-Fa-f]{1,4}:){5}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){,4}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){,6}[0-9A-Fa-f]{1,4})?::)
(?i)Daily[-_\.]Show|Nightly News|^\[[a-zA-Z\.\-]+\\].*[-_].*\d{1,3}[-_. ]((\[|\()(h264-)?\d{3,4}(p|i)(\\]|\))\s?(\[AAC\\])?|\[[a-fA-F0-9]{8}\\]|(8|10)BIT|hi10p)(\[[a-fA-F0-9]{8}\\])?|(\d\d-){2}[12]\d{3}|[12]\d{3}(\.\d\d){2}|\d+x\d+|\.e\d{1,3}\.|s\d{1,3}[-._ ]?[ed]\d{1,3}([ex]\d{1,3}|[-.\w ])|[-._ ](\dx\d\d|C4TV|Complete[-._ ]Season|DSR|(D|H|P|S)DTV|EP[-._ ]?\d{1,3}|S\d{1,3}.+Extras|SUBPACK|Season[-._ ]\d{1,2})([-._ ]|$)|TVRIP|TV[-._ ](19|20)\d\d|TrollHD
([\d\w]{8}-){3}[\d\w]{8}|OPEN-SOURCE-GPLV3-LICENSE
(\A([0-9a-f]{1,4}:){1,1}(:[0-9a-f]{1,4}){1,6}\Z)|(\A([0-9a-f]{1,4}:){1,2}(:[0-9a-f]{1,4}){1,5}\Z)|(\A([0-9a-f]{1,4}:){1,3}(:[0-9a-f]{1,4}){1,4}\Z)|(\A([0-9a-f]{1,4}:){1,4}(:[0-9a-f]{1,4}){1,3}\Z)|(\A([0-9a-f]{1,4}:){1,5}(:[0-9a-f]{1,4}){1,2}\Z)|(\A([0-9a-f]{1,4}:){1,6}(:[0-9a-f]{1,4}){1,1}\Z)|(\A(([0-9a-f]{1,4}:){1,7}|:):\Z)|(\A:(:[0-9a-f]{1,4}){1,7}\Z)|(\A((([0-9a-f]{1,4}:){6})(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3})\Z)|(\A(([0-9a-f]{1,4}:){5}[0-9a-f]{1,4}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3})\Z)|(\A([0-9a-f]{1,4}:){5}:[0-9a-f]{1,4}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A([0-9a-f]{1,4}:){1,1}(:[0-9a-f]{1,4}){1,4}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A([0-9a-f]{1,4}:){1,2}(:[0-9a-f]{1,4}){1,3}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A([0-9a-f]{1,4}:){1,3}(:[0-9a-f]{1,4}){1,2}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A([0-9a-f]{1,4}:){1,4}(:[0-9a-f]{1,4}){1,1}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A(([0-9a-f]{1,4}:){1,5}|:):(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A:(:[0-9a-f]{1,4}){1,5}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)
(^\s*(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$)
(S*([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}S*|S*([0-9a-fA-F]{1,4}:){1,7}:S*|S*([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}S*|S*([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}S*|S*([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}S*|S*([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}S*|S*([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}S*|S*[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})S*|S*:((:[0-9a-fA-F]{1,4}){1,7}|:)S*|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))
\A(?:\n            ([a-z]{2,3}(?:(?:-[a-z]{3}){0,3})?|[a-z]{4}|[a-z]{5,8}) # language\n            (?:-([a-z]{4}))?                                        # script\n            (?:-([a-z]{2}|\d{3}))?                                  # region\n            (?:-([0-9a-z]{5,8}|\d[0-9a-z]{3}))*                     # variant\n            (?:-([0-9a-wyz](?:-[0-9a-z]{2,8})+))*                   # extension\n            (?:-(x(?:-[0-9a-z]{1,8})+))?|                           # privateuse subtag\n            (x(?:-[0-9a-z]{1,8})+)|                                 # privateuse tag\n            /* ([a-z]{1,3}(?:-[0-9a-z]{2,8}){1,2}) */               # grandfathered\n            )\z
\A(?:\n          ([a-z]{2,3}(?:(?:-[a-z]{3}){0,3})?|[a-z]{4}|[a-z]{5,8}) # language\n          (?:-([a-z]{4}))?                                        # script\n          (?:-([a-z]{2}|\d{3}))?                                  # region\n          (?:-([0-9a-z]{5,8}|\d[0-9a-z]{3}))*                     # variant\n          (?:-([0-9a-wyz](?:-[0-9a-z]{2,8})+))*                   # extension\n          (?:-(x(?:-[0-9a-z]{1,8})+))?|                           # privateuse subtag\n          (x(?:-[0-9a-z]{1,8})+)|                                 # privateuse tag\n          /* ([a-z]{1,3}(?:-[0-9a-z]{2,8}){1,2}) */               # grandfathered\n          )\z
\A(\".{60,}\"\n){2}\Z
\n                PHP_ARG_WITH\(\n                    \s*\n\n                    ([^,]*)\n\n                    (?:\n                        \s*,\s*\n                        \[?\n                            ([^,\)]*)\n                        \\]?\n\n                        (?:\n                            \s*,\s* \n\n                            \[ \n                                \s*\n\n                                # simple match (\S+)\n\n                                ([a-zA-Z0-9-]+)  # option\n                                (?:\n                                    =?\n\n                                    \[?\n                                        =?([^\s\\]]*) \n                                    \\]?\n                                )?                 # option value hint\n\n                                \s+\n\n                                ([^,\)]*)        # option description\n                                \s*                 \n                            \\]\n\n                            (?:\n                                \s*,\s* \n                                ([^,\)]*)\n\n                                (?:\n                                    \s*,\s* \n                                    ([^,\)]*)\n                                )?\n                            )?\n                        )?\n                    )?
\n            --TEST--\s*(.*)\s*(?:--CONDITION--\s*(.*))?\s*((?:--TEMPLATE(?:\(.*\))?--(?:.*))+)\s*--EXCEPTION--\s*(.*)
\n          (?:@(base|prefix)) |                                            # Turtle keywords\n          [\"']{3} |                                                       # STRING_LITERAL_LONG_SINGLE_QUOTE/2\n          \"[^\"]*\"^^ | \"[^\"]*\"@ |                                          # Typed/Language literals\n          (?:\n            (?:\s*(?:(?:<[^>]*>) | (?:\w*:\w+) | (?:\"[^\"]*\"))\s*[,;]) ||\n            (?:\s*(?:(?:<[^>]*>) | (?:\w*:\w+) | (?:\"[^\"]*\"))){3}\n          )\n        
\n        (?:([^:/?#]+):)?            # scheme\n        (?://                       # authority\n            (?:([^/?\#@]*)@)?       # userinfo\n            ([^/?\#]*)              # host:port\n        )?\n        ([^?\#]*)                   # path\n        \??([^\#]*)                 # query\n        \#?(.*)                     # fragment\n        
\n        (?:@(base|prefix)) |                                            # Turtle keywords\n        [\"']{3} |                                                       # STRING_LITERAL_LONG_SINGLE_QUOTE/2\n        \"[^\"]*\"^^ | \"[^\"]*\"@ |                                          # Typed/Language literals\n        (?:\n          (?:\s*(?:(?:<[^>]*>) | (?:\w*:\w+) | (?:\"[^\"]*\"))\s*[,;]) ||\n          (?:\s*(?:(?:<[^>]*>) | (?:\w*:\w+) | (?:\"[^\"]*\"))){3}\n        )\n      
\n        (?:\n          (?:\s*(?:(?:<[^>]*>) | (?:\w*:\w+) | (?:\"[^\"]*\")))?           # IRIref\n          \s*\{                                                         # Graph Start\n          (?:\n            (?:\s*(?:(?:<[^>]*>) | (?:\w*:\w+) | (?:\"[^\"]*\"))\s*[,;]) ||\n            (?:\s*(?:(?:<[^>]*>) | (?:\w*:\w+) | (?:[\"']+[^\"']*[\"']+))){3}\n          )*                                                            # triples\n          [\s\.]*\}\s*                                                  # Graph end\n        )\n      
\n        ([012*.][0-9*.][0-9*.][A-Z@*.]) # tag\n        (\[([0-9*.]{2,3})\\])?           # occurence\n        (\$?([_A-Za-z0-9]+))?           # subfields\n        (\/(\d+)?(-(\d+)?)?)?           # position\n    
\n        \{\n            (([_A-Za-z](\w*)(\.[_a-z]\w*|\[\d+\\])?)|\w+)?  # fieldname\n            (![rs])?  # conversion\n            (:\.?[<>=^]?[+ -]?\w*,?(\.\w+)?[bcdeEfFgGnosxX%]?)?  # format_spec\n        \}\n        
\n      (\n        [^=\[]+     # Any char, but not an assignment operator\n                    # or subscript (non-greedy)\n        (?:         # One or multiple conditional subscripts\n          \[\n          [^\\]]*    # The subscript key\n          (?:\n            =       # The subscript comparison operator\n            [^\\]]*  # The subscript value\n          )?\n          \\]\n        )*\n      )\n      \s*           # Whitespaces after the key (needed because subscripts\n                    # always end with ']')\n      =             # The assignment operator\n      (.*)          # The value\n    
\n      [^\w]ts\s*                                    # match \"ts\" with whitespace\n      \(\s*                                         # match \"(\" argument list start\n      ((?:(?:'(?:\'|[^'])*'|\"(?:\"|[^\"])*\")(?:\s*\+\s*)?)+)\s*\n      [,\)]                                         # match \")\" or \",\" to finish\n      
\n      \A ( [A-PR-UWYZ01][A-HJ-Z0]? )     # area\n      (?: ( [0-9IO][0-9A-HJKMNPR-YIO]? ) # district\n        (?: \s* ( [0-9IO] )              # sector\n          ( [ABD-HJLNPQ-Z]{2} )? )? )?   # unit\n      \Z\n    
\n    (                  # first date (don't match beginning of string)\n    (?:\d{4}|\d{1,2})  # first part can be 1-2 or 4 digits long (DD, MM, YYYY)\n    (?:[\.\-\/]?\d{1,2}[\.\-\/]?)? # middle part (1-2 digits), optionally separated\n    (?:\d{4}|\d{1,2})? # end part (1-2, 4 digits), optionally separated\n    )                  # end of first date\n    (?:-(              # optional second date, separated by \"-\"\n    (?:\d{4}|\d{1,2})  # first part can be 1-2 or 4 digits long (DD, MM, YYYY)\n    (?:[\.\-\/]?\d{1,2})? # middle part (1-2 digits), optionally separated\n    (?:[\.\-\/]?(?:\d{4}|\d{1,2}))? # end part (1-2, 4 digits), optionally separated\n    ))?                # end of optional second date\n    
\n    (?:([^:/?#]+):)?            # scheme\n    (?://                       # authority\n        (?:([^/?\#@]*)@)?       # userinfo\n        ([^/?\#]*)()            # host:port\n    )?\n    ([^?\#]*)                   # path\n    \??([^\#]*)                 # query\n    \#?(.*)                     # fragment\n    
\s*             #padding\n\t([\w:']+)        #package\n\n\t \s*             #padding\n\t(\d*(?:\.\d+)*)? #optional version\n\n\t(?:              #optional comment\n\n        (?:              #\"Comment\"\n\t    \s*          #padding\n          -\s+           #delimiter\n\n          (?:            #optional extensions\n\t    \s*          #padding\n\t    (.*)         #import\n            ([+-])       #no?\n\t    \s*          #padding\n          )?\n\n          (.+)?          #actual comment \n        )?\n      )?\n      
